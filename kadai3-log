●概要
課題3では、Flaskを使用して在庫管理システムのAPIを実装しました。
Django、Fast APIなど、他のフレームワーク検討しましたが、以下の点でFlaskが適していると考えました。

・シンプルさ、迅速な開発:
Flaskは軽量でシンプルなため、迅速にシステムを構築できると考えました。他のフレームワーク（FastAPIやDjango）も迅速な開発が可能ですが、Flaskはシンプルさと軽量性という観点で、小規模なタスクや短期間での開発に最適だと考えました。

・高いパフォーマンス:
Flaskは軽量な設計であり、高いパフォーマンスを発揮すると考えました。FastAPIも非常に高いパフォーマンスを提供しますが、FlaskはシンプルなAPI実装において特に効果的です。また、Djangoも適切な実装により高いパフォーマンスを発揮しますが、Flaskの軽量性が特に有利だと考えました。APIのレスポンスが迅速であるため、在庫管理システムのユーザーエクスペリエンスを向上させることができると考えました。

------------------------------

本課題で実装したAPIは以下の5種類です。

・在庫の更新、作成 (POST /v1/stocks)
・在庫チェック (GET /v1/stocks および GET /v1/stocks/<name>)
・販売 (POST /v1/sales)
・売り上げチェック (GET /v1/sales)
・全削除 (DELETE /v1/stocks)

------------------------------

●作業詳細
①Flaskアプリケーションの作成:
・Flaskフレームワークを使用してアプリケーションを作成。
・SQLiteをデータベースとして使用し、Flask-SQLAlchemyを用いてデータベースとの接続を設定。
・Flask-Migrateを利用してデータベースのマイグレーション管理を実施。

②データベースモデルの定義:
・StockモデルとSalesモデルを定義。
・Stockモデルは商品名（最大8文字のアルファベット）と在庫数を持つ。
・Salesモデルは売上を管理し、小数点以下2桁までのフォーマットを実装。

③APIエンドポイントの実装:
在庫の更新、作成 (POST /v1/stocks):
・商品名と追加する在庫数を受け取り、在庫を追加または更新。
・入力値のバリデーションを実施し、不正な値の場合は400エラーを返す。

在庫チェック (GET /v1/stocks および GET /v1/stocks/<name>):
・全ての在庫情報を取得、または指定した商品の在庫情報を取得。
・商品名で昇順ソートし、JSON形式でレスポンスを返す。

販売 (POST /v1/sales):
・商品名、販売数、価格を受け取り、在庫を減少し売上を加算。
・入力値のバリデーションを実施し、不正な値や在庫不足の場合は400エラーを返す。

売り上げチェック (GET /v1/sales):
・現在の総売上をJSON形式で返す。

全削除 (DELETE /v1/stocks):
・全ての在庫と売上データを削除。

④エラーハンドリングの実装:
・予期しない入力値に対して、適切なエラーメッセージ（{"message": "ERROR"}）を返すよう設定。

●工夫した点
データベースのマイグレーション管理:
Flask-Migrateを使用して、データベースのスキーマ変更が容易に行えるようにしました。

入力値のバリデーション:
商品名の長さ、アルファベットのチェック、在庫数や販売数が正の整数であることを確認し、不正な入力を防ぐようにしました。

エラーハンドリング:
各APIで詳細なバリデーションを実施し、適切なエラーメッセージを返すようにしました。

APIのバージョン管理:
APIのバージョン管理を導入し、/v1から/v2へのバージョンアップ時に新しい機能やエンドポイントを追加しても、既存の/v1エンドポイントは影響を受けずにそのまま動作するようにしました。これにより、古いバージョンのAPIを使っているクライアントに対して後方互換性を維持したまま新しいバージョンを提供することが可能になります。

------------------------------

●確認
> 実装された5つのAPIについて、実行例のcurlコマンドを使用して、同じ結果が得られることを確認しましたか？

①実行例1
$ curl -X DELETE http://54.65.196.247/v1/stocks
{}

$ curl -d '{"name": "xxx", "amount": 100}' -H 'Content-Type: application/json' http://54.65.196.247/v1/stocks
{"name":"xxx","amount":100}

$ curl -d '{"name": "xxx", "amount": 4}' -H 'Content-Type: application/json' http://54.65.196.247/v1/sales
{"name":"xxx","amount":4}

$ curl http://54.65.196.247/v1/stocks
{"xxx":96}

$ curl -d '{"name": "yyy", "amount": 100}' -H 'Content-Type: application/json' http://54.65.196.247/v1/stocks
{"name":"yyy","amount":100}

$ curl -d '{"name": "YYY", "amount": 100}' -H 'Content-Type: application/json' http://54.65.196.247/v1/stocks
{"name":"YYY","amount":100}

$ curl http://54.65.196.247/v1/stocks
{"YYY":100,"xxx":96,"yyy":100}

②実行例2
$ curl -X DELETE http://54.65.196.247/v1/stocks
{}

$ curl -d '{"name": "xxx", "amount": 1.1}' -H 'Content-Type: application/json' http://54.65.196.247/v1/stocks
{"message":"ERROR"}

③実行例3
$ curl -X DELETE http://54.65.196.247/v1/stocks
{}

$ curl -d '{"name": "aaa", "amount": 10}' -H 'Content-Type: application/json' http://54.65.196.247/v1/stocks
{"name":"aaa","amount":10}

$ curl -d '{"name": "bbb", "amount": 10}' -H 'Content-Type: application/json' http://54.65.196.247/v1/stocks
{"name":"bbb","amount":10}

$ curl -d '{"name": "aaa", "amount": 4, "price": 100}' -H 'Content-Type: application/json' http://54.65.196.247/v1/sales
{"name":"aaa","amount":4,"price":100}

$ curl -d '{"name": "aaa", "price": 80}' -H 'Content-Type: application/json' http://54.65.196.247/v1/sales
{"name":"aaa","price":80}

$ curl http://54.65.196.247/v1/sales
{"sales":480.0}

> 異常系 (予期しない値がリクエストされた場合はエラーとして扱う) について実装しましたか？

■在庫の更新、作成 (POST /v1/stocks)
①商品名が無効な場合（空文字列、長すぎる名前、無効な文字を含む）
curl -d '{"name": "", "amount": 100}' -H 'Content-Type: application/json' http://54.65.196.247/v1/stocks
{"message":"ERROR"}

curl -d '{"name": "toolongname", "amount": 100}' -H 'Content-Type: application/json' http://54.65.196.247/v1/stocks
{"message":"ERROR"}

curl -d '{"name": "inv@lid", "amount": 100}' -H 'Content-Type: application/json' http://54.65.196.247/v1/stocks
{"message":"ERROR"}

②数量が無効な場合（負の整数、小数、文字列）
curl -d '{"name": "valid", "amount": -10}' -H 'Content-Type: application/json' http://54.65.196.247/v1/stocks
{"message":"ERROR"}

curl -d '{"name": "valid", "amount": 10.5}' -H 'Content-Type: application/json' http://54.65.196.247/v1/stocks
{"message":"ERROR"}

curl -d '{"name": "valid", "amount": "ten"}' -H 'Content-Type: application/json' http://54.65.196.247/v1/stocks
{"message":"ERROR"}

■在庫チェック (GET /v1/stocks)
①商品名が無効な場合（長すぎる名前、無効な文字を含む）
curl http://54.65.196.247/v1/stocks/inv@lid
{"message":"ERROR"}

curl http://54.65.196.247/v1/stocks/toolongname
{"message":"ERROR"}

■販売 (POST /v1/sales)
①商品名が無効な場合（空文字列、長すぎる名前、無効な文字を含む）
curl -d '{"name": "", "amount": 10}' -H 'Content-Type: application/json' http://54.65.196.247/v1/sales
{"message":"ERROR"}

curl -d '{"name": "toolongname", "amount": 10}' -H 'Content-Type: application/json' http://54.65.196.247/v1/sales
{"message":"ERROR"}

curl -d '{"name": "inv@lid", "amount": 10}' -H 'Content-Type: application/json' http://54.65.196.247/v1/sales
{"message":"ERROR"}

②数量が無効な場合（負の整数、小数、文字列）
curl -d '{"name": "valid", "amount": -5}' -H 'Content-Type: application/json' http://54.65.196.247/v1/sales
{"message":"ERROR"}

curl -d '{"name": "valid", "amount": 5.5}' -H 'Content-Type: application/json' http://54.65.196.247/v1/sales
{"message":"ERROR"}

curl -d '{"name": "valid", "amount": "five"}' -H 'Content-Type: application/json' http://54.65.196.247/v1/sales
{"message":"ERROR"}

③価格が無効な場合（負の数、文字列）
curl -d '{"name": "valid", "amount": 10, "price": -100}' -H 'Content-Type: application/json' http://54.65.196.247/v1/sales
{"message":"ERROR"}

curl -d '{"name": "valid", "amount": 10, "price": "hundred"}' -H 'Content-Type: application/json' http://54.65.196.247/v1/sales
{"message":"ERROR"}

■その他
①不正なパスにアクセスした場合
curl http://54.65.196.247/v1/sales/invalidpath
{"message":"ERROR"}

curl -X DELETE http://54.65.196.247/v1/stocks/invalidpath
{"message":"ERROR"}
