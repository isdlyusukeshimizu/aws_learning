●概要
Apacheのconfファイルを変更してDigest認証を行いました。

本課題に取り組むにあたり、APIの実装も視野に入れました。APIの実装をすることで、柔軟性やスケーラビリティの向上といった利点が得られることも理解していますが、
今回の課題では、Apacheのconfファイルを変更し、Digest認証を行う選択をしました。以下がその理由です。

・Cookie非依存の実装：
本課題の要件として、Cookieに依存しない認証の実装が求められていました。
API実装でもTokenベースの認証を利用することで同様の結果を得ることができますが、ApacheのDigest認証はCookieに依存せずに動作するため、シンプルかつ確実にこの要件を満たすことができると考えました。

・パフォーマンスの向上：
認証処理をウェブサーバーレベルで行うことで、アプリケーションサーバーの負荷を軽減し、システム全体のパフォーマンスを向上させることができると考えました。API実装でも適切に設計することでパフォーマンスの向上は可能ですが、Apacheでの処理はシステムリソースを効率的に活用するため、特にシンプルな認証要件の場合に効果的だと考えました。

------------------------------

下記に本課題における、コマンド操作と説明を記載いたします。

①Webサーバーの設定ファイルを編集
/etc/httpd/conf/httpd.confファイルを編集し、下記の設定を追加。
    <Directory "/var/www/html/secret">
        AuthType Digest
        AuthName "Digest Auth"
        AuthUserFile "/etc/httpd/conf/.digestpass"
        Require valid-user
    </Directory>

②ユーザ登録
htdingest -c /etc/httpd/conf/.digestpass "Digest Auth" aws

パスワードファイルの中身を確認
cat /etc/httpd/conf/.digestpass

③Webサーバーの再起動
systemctl restart httpd

④確認
> Basic認証やダイジェスト認証について理解しましたか？
Basic認証
手軽ですべてのWebサーバー、ブラウザで対応しているため簡易的な認証で使われている。
Basic認証はIDとPasswordをbase64エンコードして送信するため、途中で盗聴された場合base64でデコードすればID、Passwordが簡単に解読されてしまう。これを防ぐ方法としてHTTPSで暗号化通信をする必要がある。

Digest認証
Basic認証の平文でIDとPasswordを送るという点を改善した認証方式で、ハッシュ化して送信する。
IDとPasswordをMD5でハッシュ化し送信するため、盗聴されてもパスワードの解析が困難である。
HTTPSで通信を行えばBasic認証で良いため、Digest認証は基本的にHTTPS通信ができないときのHTTP認証方式だと考えている。

> 実行例のcurlコマンドを使用して、同じ結果が得られることを確認しましたか？

curl http://54.65.196.247/secret
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html><head>
<title>401 Unauthorized</title>
</head><body>
<h1>Unauthorized</h1>
<p>This server could not verify that you
are authorized to access the document
requested.  Either you supplied the wrong
credentials (e.g., bad password), or your
browser doesn't understand how to supply
the credentials required.</p>
</body></html>

curl -L --digest -u aws:candidate http://54.65.196.247/secret
SUCCESS

> Cookie に依存しない形で実装しましたか？
curl -v -L --digest -u aws:candidate http://54.65.196.247/secret
Set-Cookieヘッダーが返ってこなかったことにより、Cookieに依存していません。

また、ブラウザの開発者ツールを開き、認証後にアクセスしたリクエストのレスポンスヘッダにSec-Cookieが含まれていないことを確認しました。
ここからも、Cookieに依存していないことが確認できました。
